{"ast":null,"code":"import { useEffect } from 'react';\nimport useRafState from './useRafState';\nimport { isBrowser, off, on } from './misc/util';\nvar useWindowSize = function (_a) {\n  var _b = _a === void 0 ? {} : _a,\n    _c = _b.initialWidth,\n    initialWidth = _c === void 0 ? Infinity : _c,\n    _d = _b.initialHeight,\n    initialHeight = _d === void 0 ? Infinity : _d,\n    onChange = _b.onChange;\n  // Use the useRafState hook to maintain the current window size (width and height)\n  var _e = useRafState({\n      width: isBrowser ? window.innerWidth : initialWidth,\n      height: isBrowser ? window.innerHeight : initialHeight\n    }),\n    state = _e[0],\n    setState = _e[1];\n  useEffect(function () {\n    // Only run the effect on the browser (to avoid issues with SSR)\n    if (isBrowser) {\n      var handler_1 = function () {\n        var width = window.innerWidth;\n        var height = window.innerHeight;\n        // Update the state with the new window size\n        setState({\n          width: width,\n          height: height\n        });\n        // If an onChange callback is provided, call it with the new dimensions\n        if (onChange) onChange(width, height);\n      };\n      // Add event listener for the resize event\n      on(window, 'resize', handler_1);\n      // Cleanup function to remove the event listener when the component is unmounted (it's for performance optimization)\n      return function () {\n        off(window, 'resize', handler_1);\n      };\n    }\n  }, []);\n  // Return the current window size (width and height)\n  return state;\n};\nexport default useWindowSize;","map":{"version":3,"names":["useEffect","useRafState","isBrowser","off","on","useWindowSize","_a","_b","_c","initialWidth","Infinity","_d","initialHeight","onChange","_e","width","window","innerWidth","height","innerHeight","state","setState","handler_1"],"sources":["C:/Users/pilat/Documents/Knwlab/matrix-bot-widget/node_modules/react-use/esm/useWindowSize.js"],"sourcesContent":["import { useEffect } from 'react';\nimport useRafState from './useRafState';\nimport { isBrowser, off, on } from './misc/util';\nvar useWindowSize = function (_a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.initialWidth, initialWidth = _c === void 0 ? Infinity : _c, _d = _b.initialHeight, initialHeight = _d === void 0 ? Infinity : _d, onChange = _b.onChange;\n    // Use the useRafState hook to maintain the current window size (width and height)\n    var _e = useRafState({\n        width: isBrowser ? window.innerWidth : initialWidth,\n        height: isBrowser ? window.innerHeight : initialHeight,\n    }), state = _e[0], setState = _e[1];\n    useEffect(function () {\n        // Only run the effect on the browser (to avoid issues with SSR)\n        if (isBrowser) {\n            var handler_1 = function () {\n                var width = window.innerWidth;\n                var height = window.innerHeight;\n                // Update the state with the new window size\n                setState({\n                    width: width,\n                    height: height,\n                });\n                // If an onChange callback is provided, call it with the new dimensions\n                if (onChange)\n                    onChange(width, height);\n            };\n            // Add event listener for the resize event\n            on(window, 'resize', handler_1);\n            // Cleanup function to remove the event listener when the component is unmounted (it's for performance optimization)\n            return function () {\n                off(window, 'resize', handler_1);\n            };\n        }\n    }, []);\n    // Return the current window size (width and height)\n    return state;\n};\nexport default useWindowSize;\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,OAAOC,WAAW,MAAM,eAAe;AACvC,SAASC,SAAS,EAAEC,GAAG,EAAEC,EAAE,QAAQ,aAAa;AAChD,IAAIC,aAAa,GAAG,SAAAA,CAAUC,EAAE,EAAE;EAC9B,IAAIC,EAAE,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,EAAE;IAAEE,EAAE,GAAGD,EAAE,CAACE,YAAY;IAAEA,YAAY,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAGE,QAAQ,GAAGF,EAAE;IAAEG,EAAE,GAAGJ,EAAE,CAACK,aAAa;IAAEA,aAAa,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAGD,QAAQ,GAAGC,EAAE;IAAEE,QAAQ,GAAGN,EAAE,CAACM,QAAQ;EAClM;EACA,IAAIC,EAAE,GAAGb,WAAW,CAAC;MACjBc,KAAK,EAAEb,SAAS,GAAGc,MAAM,CAACC,UAAU,GAAGR,YAAY;MACnDS,MAAM,EAAEhB,SAAS,GAAGc,MAAM,CAACG,WAAW,GAAGP;IAC7C,CAAC,CAAC;IAAEQ,KAAK,GAAGN,EAAE,CAAC,CAAC,CAAC;IAAEO,QAAQ,GAAGP,EAAE,CAAC,CAAC,CAAC;EACnCd,SAAS,CAAC,YAAY;IAClB;IACA,IAAIE,SAAS,EAAE;MACX,IAAIoB,SAAS,GAAG,SAAAA,CAAA,EAAY;QACxB,IAAIP,KAAK,GAAGC,MAAM,CAACC,UAAU;QAC7B,IAAIC,MAAM,GAAGF,MAAM,CAACG,WAAW;QAC/B;QACAE,QAAQ,CAAC;UACLN,KAAK,EAAEA,KAAK;UACZG,MAAM,EAAEA;QACZ,CAAC,CAAC;QACF;QACA,IAAIL,QAAQ,EACRA,QAAQ,CAACE,KAAK,EAAEG,MAAM,CAAC;MAC/B,CAAC;MACD;MACAd,EAAE,CAACY,MAAM,EAAE,QAAQ,EAAEM,SAAS,CAAC;MAC/B;MACA,OAAO,YAAY;QACfnB,GAAG,CAACa,MAAM,EAAE,QAAQ,EAAEM,SAAS,CAAC;MACpC,CAAC;IACL;EACJ,CAAC,EAAE,EAAE,CAAC;EACN;EACA,OAAOF,KAAK;AAChB,CAAC;AACD,eAAef,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}