import Joi from 'joi';
import { RoomEvent, StateEvent, ToDeviceMessageEvent } from '../types';
/**
 * Check if the given event is a {@link StateEvent}.
 *
 * @param event - An event that is either a {@link RoomEvent} or a {@link StateEvent}.
 * @returns True, if the event is a {@link StateEvent}.
 */
export declare function isStateEvent(event: RoomEvent | StateEvent): event is StateEvent;
/**
 * Check if the given event is a {@link RoomEvent}.
 *
 * @param event - An event that is either a {@link RoomEvent} or a {@link StateEvent}.
 * @returns True, if the event is a {@link RoomEvent}.
 */
export declare function isRoomEvent(event: RoomEvent | StateEvent): event is RoomEvent;
/**
 * Check if the given value is a valid {@link RoomEvent}.
 *
 * @param event - The value to check
 * @returns true if value is a valid room event, else false.
 */
export declare function isValidRoomEvent(event: unknown): event is RoomEvent<any>;
/**
 * Check if the given value is a valid {@link StateEvent}.
 *
 * @param event - The value to check
 * @returns true if value is a valid state event, else false.
 */
export declare function isValidStateEvent(event: unknown): event is StateEvent<any>;
/**
 * Check if the given value is a valid {@link ToDeviceMessageEvent}.
 *
 * @param event - The value to check
 * @returns true if value is a valid to device message, else false.
 */
export declare function isValidToDeviceMessageEvent(event: unknown): event is ToDeviceMessageEvent<any>;
export declare const roomEventSchema: Joi.ObjectSchema<RoomEvent>;
export declare const stateEventSchema: Joi.ObjectSchema<StateEvent>;
export declare const toDeviceMessageSchema: Joi.ObjectSchema<ToDeviceMessageEvent>;
