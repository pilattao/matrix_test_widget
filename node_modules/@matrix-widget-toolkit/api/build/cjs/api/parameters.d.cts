import { WidgetParameters } from './types';
/**
 * Parameters used to initialize the widget API inside the widget.
 */
export type WidgetApiParameters = {
    /**
     * The id of the widget.
     */
    widgetId: string;
    /**
     * The origin of the client.
     */
    clientOrigin: string;
};
/**
 * Extract the parameters used to initialize the widget API from the current
 * `window.location`.
 * @returns The parameters required for initializing the widget API.
 */
export declare function extractWidgetApiParameters(): WidgetApiParameters;
/**
 * Extract the widget parameters from the current `window.location`.
 * @returns The all unprocessed raw widget parameters.
 */
export declare function extractRawWidgetParameters(): Record<string, string>;
/**
 * Extract the widget parameters from the current `window.location`.
 * @returns The widget parameters.
 */
export declare function extractWidgetParameters(): WidgetParameters;
/**
 * Individual fields that are decoded inside a widget id.
 */
export type WidgetId = {
    /**
     * The widget id of the main widget if working with modals, or the widget id
     * of the current widget if not.
     */
    mainWidgetId: string;
    /**
     * The room id the widget is registered in.
     */
    roomId?: string;
    /**
     * The user id of the user that registered the widget.
     */
    creator?: string;
    /**
     * True, if this widget is a modal widget.
     */
    isModal: boolean;
};
/**
 * Parse a widget id into the individual fields.
 * @param widgetId - The widget id to parse.
 * @returns The individual fields encoded inside a widget id.
 */
export declare function parseWidgetId(widgetId: string): WidgetId;
