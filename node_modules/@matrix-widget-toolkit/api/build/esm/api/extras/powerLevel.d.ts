import { StateEvent } from '../types';
/**
 * The name of the power levels state event.
 */
export declare const STATE_EVENT_POWER_LEVELS = "m.room.power_levels";
/**
 * The types of actions.
 */
export type PowerLevelsActions = 'invite' | 'kick' | 'ban' | 'redact';
/**
 * The content of an `m.room.power_levels` event.
 */
export type PowerLevelsStateEvent = {
    events?: {
        [key: string]: number;
    };
    state_default?: number;
    events_default?: number;
    users?: {
        [key: string]: number;
    };
    users_default?: number;
    ban?: number;
    invite?: number;
    kick?: number;
    redact?: number;
};
/**
 * Validates that `event` is has a valid structure for a
 * {@link PowerLevelsStateEvent}.
 * @param event - The event to validate.
 * @returns True, if the event is valid.
 */
export declare function isValidPowerLevelStateEvent(event: StateEvent<unknown>): event is StateEvent<PowerLevelsStateEvent>;
/**
 * Check if a user has the power to send a specific room event.
 *
 * @param powerLevelStateEvent - the content of the `m.room.power_levels` event
 * @param userId - the id of the user
 * @param eventType - the type of room event
 * @returns if true, the user has the power
 */
export declare function hasRoomEventPower(powerLevelStateEvent: PowerLevelsStateEvent | undefined, userId: string | undefined, eventType: string): boolean;
/**
 * Check if a user has the power to send a specific state event.
 *
 * @param powerLevelStateEvent - the content of the `m.room.power_levels` event
 * @param userId - the id of the user
 * @param eventType - the type of state event
 * @returns if true, the user has the power
 */
export declare function hasStateEventPower(powerLevelStateEvent: PowerLevelsStateEvent | undefined, userId: string | undefined, eventType: string): boolean;
/**
 * Check if a user has the power to perform a specific action.
 *
 * Supported actions:
 *   * invite: Invite a new user into the room
 *   * kick: Kick a user from the room
 *   * ban: Ban a user from the room
 *   * redact: Redact a message from another user
 *
 * @param powerLevelStateEvent - the content of the `m.room.power_levels` event
 * @param userId - the id of the user
 * @param action - the action
 * @returns if true, the user has the power
 */
export declare function hasActionPower(powerLevelStateEvent: PowerLevelsStateEvent | undefined, userId: string | undefined, action: PowerLevelsActions): boolean;
/**
 * Calculate the power level of the user based on a `m.room.power_levels` event.
 *
 * @param powerLevelStateEvent - the content of the `m.room.power_levels` event.
 * @param userId - the ID of the user.
 * @returns the power level of the user.
 */
export declare function calculateUserPowerLevel(powerLevelStateEvent: PowerLevelsStateEvent, userId?: string): number;
/**
 * Calculate the power level that a user needs send a specific room event.
 *
 * @param powerLevelStateEvent - the content of the `m.room.power_levels` event
 * @param eventType - the type of room event
 * @returns the power level that is needed
 */
export declare function calculateRoomEventPowerLevel(powerLevelStateEvent: PowerLevelsStateEvent, eventType: string): number;
/**
 * Calculate the power level that a user needs send a specific state event.
 *
 * @param powerLevelStateEvent - the content of the `m.room.power_levels` event
 * @param eventType - the type of state event
 * @returns the power level that is needed
 */
export declare function calculateStateEventPowerLevel(powerLevelStateEvent: PowerLevelsStateEvent, eventType: string): number;
/**
 * Calculate the power level that a user needs to perform an action.
 *
 * Supported actions:
 *   * invite: Invite a new user into the room
 *   * kick: Kick a user from the room
 *   * ban: Ban a user from the room
 *   * redact: Redact a message from another user
 *
 * @param powerLevelStateEvent - the content of the `m.room.power_levels` event
 * @param action - the action
 * @returns the power level that is needed
 */
export declare function calculateActionPowerLevel(powerLevelStateEvent: PowerLevelsStateEvent, action: PowerLevelsActions): number;
