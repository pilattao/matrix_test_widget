import { Capability, IRoomEvent, ISendEventFromWidgetResponseData, Symbols, WidgetEventCapability } from 'matrix-widget-api';
import { StateEvent, WidgetApi } from './types';
export declare function convertToRawCapabilities(rawCapabilities: Array<WidgetEventCapability | Capability>): string[];
export declare function isDefined<T>(arg: T | null | undefined): arg is T;
export declare function unique<T>(items: Iterable<T>): T[];
export declare function equalsSet<T>(as: Set<T>, bs: Set<T>): boolean;
export declare function subtractSet<T>(as: Set<T>, bs: Set<T>): Set<T>;
export declare function isInRoom(matrixEvent: IRoomEvent, currentRoomId: string, roomIds?: string[] | Symbols.AnyRoom): boolean;
/**
 * Create a state event from the arguments.
 *
 * @returns A state event with current timestamp origin_server_ts.
 */
export declare function makeEventFromSendStateEventResult<T>(type: string, stateKey: string, content: T, sender: string, sendResult: ISendEventFromWidgetResponseData): StateEvent<T>;
/**
 * Send a state event and resolve to a "virtual" state event.
 *
 * @returns Promise, that resolves to a state event with current timestamp origin_server_ts.
 */
export declare function sendStateEventWithEventResult<T>(widgetApi: WidgetApi, type: string, stateKey: string, content: T): Promise<StateEvent<T>>;
