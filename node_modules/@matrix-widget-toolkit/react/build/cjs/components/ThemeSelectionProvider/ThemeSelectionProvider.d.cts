import { PropsWithChildren, ReactElement } from 'react';
/**
 * Themes with different color schemes, either `light` or `dark`.
 */
export type Theme = 'light' | 'dark' | string;
/**
 * Return value of the {@link useThemeSelection} hook.
 */
export type ThemeSelectionContextType = {
    /**
     * The current color scheme.
     */
    theme: Theme;
    /**
     * Whether the widget is displayed in a modal.
     *
     * @remarks Modals have different background colors which the theme needs to
     * take into account.
     */
    isModal: boolean;
    /**
     * Select the current color scheme.
     *
     * @param theme - The new color scheme.
     */
    setTheme: (theme: Theme) => void;
};
export declare const ThemeSelectionContext: import("react").Context<ThemeSelectionContextType | undefined>;
/**
 * Hook for accessing the current theme selection.
 * @returns The current theme selection.
 */
export declare const useThemeSelection: () => ThemeSelectionContextType;
/**
 * Props for the {@link ThemeSelectionProvider} component.
 */
export type ThemeSelectionProviderProps = PropsWithChildren;
/**
 * Provides the current theme selection to child components.
 * Use the {@link useThemeSelection} hook to access it.
 * @param param0 - {@link ThemeSelectionProviderProps}
 */
export declare function ThemeSelectionProvider({ children, }: ThemeSelectionProviderProps): ReactElement;
