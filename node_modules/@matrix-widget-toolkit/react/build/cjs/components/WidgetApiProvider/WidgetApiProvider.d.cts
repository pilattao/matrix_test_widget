import { WidgetApi, WidgetRegistration } from '@matrix-widget-toolkit/api';
import { ComponentType, DispatchWithoutAction, PropsWithChildren, ReactElement } from 'react';
import { FallbackProps } from 'react-error-boundary';
/**
 * Props for the {@link (WidgetApiProvider:function)} component.
 */
export type WidgetApiProviderProps = PropsWithChildren<{
    /**
     * Configuration to set during Widget registration.
     */
    widgetRegistration?: WidgetRegistration;
    /**
     * Result from a call to `WidgetApiImpl.create`.
     */
    widgetApiPromise: Promise<WidgetApi>;
    /**
     * Component to display while the widget API communication is established or
     * while capabilities are evaluated or requested from the user.
     */
    loadingViewComponent: ComponentType;
    /**
     * Component to display if the widget is opened in an unsupported mobile
     * client.
     */
    mobileClientErrorComponent: ComponentType;
    /**
     * Component to display if the widget is opened outside a Matrix client.
     */
    outsideClientErrorComponent: ComponentType;
    /**
     * Component to display when a child component fails to render.
     */
    childErrorComponent: ComponentType<FallbackProps>;
    /**
     * Component to display if the required capabilities are missing. The
     * `onRetry` callback can be used to re-request them from the user.
     */
    missingCapabilitiesComponent: ComponentType<{
        onRetry: DispatchWithoutAction;
    }>;
    /**
     * Component to display when the widget is not properly configured in the
     * room. Takes the expected `widgetRegistration` as a parameter.
     */
    missingParametersErrorComponent: ComponentType<{
        widgetRegistration?: WidgetRegistration;
    }>;
}>;
/**
 * Provides the `WidgetApi` in the React context once it's fully
 * initialized without errors.
 * Use {@link useWidgetApi} to access it.
 * @param param0 - {@link WidgetApiProviderProps}
 */
export declare function WidgetApiProvider({ children, widgetApiPromise, widgetRegistration, loadingViewComponent: LoadingViewComponent, mobileClientErrorComponent: MobileClientErrorComponent, outsideClientErrorComponent: OutsideClientErrorComponent, childErrorComponent: ChildErrorComponent, missingCapabilitiesComponent: MissingCapabilitiesComponent, missingParametersErrorComponent: MissingParametersErrorComponent, }: WidgetApiProviderProps): ReactElement;
