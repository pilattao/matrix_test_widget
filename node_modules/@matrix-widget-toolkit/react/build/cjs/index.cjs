'use strict';

var jsxRuntime = require('react/jsx-runtime');
var reactUse = require('react-use');
var react = require('react');
var api = require('@matrix-widget-toolkit/api');
var reactErrorBoundary = require('react-error-boundary');

/*
 * Copyright 2022 Nordeck IT + Consulting GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var WidgetApiContext = react.createContext(undefined);
/**
 * Hook for accessing the widget API.
 *
 * @remarks Can only be called inside a `WidgetApiProvider`
 *          (or WidgetApiMockProvider in tests).
 *
 * @returns A fully initialized widget API.
 */
var useWidgetApi = function () {
    var context = react.useContext(WidgetApiContext);
    if (context === undefined) {
        throw new Error('useWidgetApi must be used within a WidgetApiProvider (or WidgetApiMockProvider in tests)');
    }
    return context;
};
/**
 * Provides a custom instance of the `WidgetApi` to the context.
 *
 * @remarks Should only be used in tests.
 */
var WidgetApiMockProvider = WidgetApiContext.Provider;

var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/**
 * Provides the `WidgetApi` in the React context once it's fully
 * initialized without errors.
 * Use {@link useWidgetApi} to access it.
 * @param param0 - {@link WidgetApiProviderProps}
 */
function WidgetApiProvider(_a) {
    var _this = this;
    var _b;
    var children = _a.children, widgetApiPromise = _a.widgetApiPromise, widgetRegistration = _a.widgetRegistration, LoadingViewComponent = _a.loadingViewComponent, MobileClientErrorComponent = _a.mobileClientErrorComponent, OutsideClientErrorComponent = _a.outsideClientErrorComponent, ChildErrorComponent = _a.childErrorComponent, MissingCapabilitiesComponent = _a.missingCapabilitiesComponent, MissingParametersErrorComponent = _a.missingParametersErrorComponent;
    var isOpenedByClient = react.useMemo(function () { return api.extractWidgetParameters(); }, []).isOpenedByClient;
    var _c = react.useState(), hasInitalCapabilitiesGranted = _c[0], setInitialCapabilitiesGranted = _c[1];
    var _d = reactUse.useAsyncFn(function (widgetApi) { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, widgetApi.rerequestInitialCapabilities()];
                case 1:
                    _b.sent();
                    setInitialCapabilitiesGranted(true);
                    return [3 /*break*/, 3];
                case 2:
                    _b.sent();
                    setInitialCapabilitiesGranted(false);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); }, []), rerequestInitialCapabilities = _d[1];
    var _e = reactUse.useAsync(function () { return __awaiter(_this, void 0, void 0, function () {
        var widgetApi;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, widgetApiPromise];
                case 1:
                    widgetApi = _a.sent();
                    setInitialCapabilitiesGranted(widgetApi.hasInitialCapabilities());
                    return [2 /*return*/, widgetApi];
            }
        });
    }); }, [widgetApiPromise]), widgetApi = _e.value, error = _e.error, loading = _e.loading;
    if (loading) {
        return jsxRuntime.jsx(LoadingViewComponent, {});
    }
    if (error || !widgetApi) {
        if (isOpenedByClient) {
            return jsxRuntime.jsx(MobileClientErrorComponent, {});
        }
        else {
            return jsxRuntime.jsx(OutsideClientErrorComponent, {});
        }
    }
    if (!hasInitalCapabilitiesGranted) {
        return (jsxRuntime.jsx(MissingCapabilitiesComponent, { onRetry: function () { return rerequestInitialCapabilities(widgetApi); } }));
    }
    var hasParameters = api.hasWidgetParameters(widgetApi);
    // Check for custom required parameters that are not part of the default setup
    // and fail registration if they are missing.
    var customRequiredParameters = (_b = widgetRegistration === null || widgetRegistration === void 0 ? void 0 : widgetRegistration.requiredParameters) !== null && _b !== void 0 ? _b : [];
    if (customRequiredParameters.length > 0) {
        hasParameters =
            hasParameters &&
                customRequiredParameters.every(function (param) {
                    return (param in widgetApi.widgetParameters &&
                        typeof widgetApi.widgetParameters[param] === 'string');
                });
    }
    return (jsxRuntime.jsx(WidgetApiContext.Provider, { value: widgetApi, children: hasParameters ? (jsxRuntime.jsx(reactErrorBoundary.ErrorBoundary, { FallbackComponent: ChildErrorComponent, children: children })) : (jsxRuntime.jsx(MissingParametersErrorComponent, { widgetRegistration: widgetRegistration })) }));
}

/**
 * A guard that ask the user for capabilities and only shows the `children`
 * if all capabilities were accepted.
 * If capabilities are denined, a message and a button to retry is displayed
 * instead.
 * @param param0 - {@link CapabilitiesGuardProps}
 */
function CapabilitiesGuard(_a) {
    var capabilities = _a.capabilities, children = _a.children, MissingCapabilitiesComponent = _a.missingCapabilitiesComponent, LoadingComponent = _a.loadingComponent;
    var widgetApi = useWidgetApi();
    var _b = reactUse.useAsyncRetry(function () { return widgetApi.requestCapabilities(capabilities); }, [widgetApi, capabilities]), loading = _b.loading, error = _b.error, requestCapabilities = _b.retry;
    if (loading) {
        return jsxRuntime.jsx(LoadingComponent, {});
    }
    if (error) {
        return jsxRuntime.jsx(MissingCapabilitiesComponent, { onRetry: requestCapabilities });
    }
    return jsxRuntime.jsx(jsxRuntime.Fragment, { children: children });
}

var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var ThemeSelectionContext = react.createContext(undefined);
/**
 * Hook for accessing the current theme selection.
 * @returns The current theme selection.
 */
var useThemeSelection = function () {
    var context = react.useContext(ThemeSelectionContext);
    if (context === undefined) {
        throw new Error('useThemeSelection must be used within a ThemeSelectionProvider');
    }
    return context;
};
/**
 * Provides the current theme selection to child components.
 * Use the {@link useThemeSelection} hook to access it.
 * @param param0 - {@link ThemeSelectionProviderProps}
 */
function ThemeSelectionProvider(_a) {
    var children = _a.children;
    var _b = react.useState(function () {
        var widgetId = '';
        try {
            (widgetId = api.extractWidgetApiParameters().widgetId);
        }
        catch (_a) {
            // ignore
        }
        var isModal = api.parseWidgetId(widgetId).isModal;
        var theme = api.extractWidgetParameters().theme;
        if (theme) {
            return { theme: theme, isModal: isModal };
        }
        var prefersColorSchemeDark = window.matchMedia &&
            window.matchMedia('(prefers-color-scheme: dark)').matches;
        return { theme: prefersColorSchemeDark ? 'dark' : 'light', isModal: isModal };
    }), _c = _b[0], theme = _c.theme, isModal = _c.isModal, setState = _b[1];
    var setTheme = react.useCallback(function (theme) {
        setState(function (old) { return (__assign(__assign({}, old), { theme: theme })); });
    }, []);
    var context = react.useMemo(function () { return ({
        theme: theme,
        isModal: isModal,
        setTheme: setTheme,
    }); }, [isModal, setTheme, theme]);
    return (jsxRuntime.jsx(ThemeSelectionContext.Provider, { value: context, children: children }));
}

exports.CapabilitiesGuard = CapabilitiesGuard;
exports.ThemeSelectionProvider = ThemeSelectionProvider;
exports.WidgetApiMockProvider = WidgetApiMockProvider;
exports.WidgetApiProvider = WidgetApiProvider;
exports.useThemeSelection = useThemeSelection;
exports.useWidgetApi = useWidgetApi;
