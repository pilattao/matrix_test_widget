/**
 * @packageDocumentation This is package that provides a Widget API
 *                       intergration for React apps.
 */

import { Capability } from 'matrix-widget-api';
import { ComponentType } from 'react';
import { DispatchWithoutAction } from 'react';
import { FallbackProps } from 'react-error-boundary';
import { PropsWithChildren } from 'react';
import { Provider } from 'react';
import { ReactElement } from 'react';
import { WidgetApi } from '@matrix-widget-toolkit/api';
import { WidgetEventCapability } from 'matrix-widget-api';
import { WidgetRegistration } from '@matrix-widget-toolkit/api';

/**
 * A guard that ask the user for capabilities and only shows the `children`
 * if all capabilities were accepted.
 * If capabilities are denined, a message and a button to retry is displayed
 * instead.
 * @param param0 - {@link CapabilitiesGuardProps}
 */
export declare function CapabilitiesGuard({ capabilities, children, missingCapabilitiesComponent: MissingCapabilitiesComponent, loadingComponent: LoadingComponent, }: CapabilitiesGuardProps): ReactElement;

/**
 * Props for the {@link CapabilitiesGuard} component.
 */
export declare type CapabilitiesGuardProps = PropsWithChildren<{
    /**
     * Required capabilities to display the `children`.
     */
    capabilities: Array<WidgetEventCapability | Capability>;
    /**
     * Component to display if the required capabilities are missing. The
     * `onRetry` callback can be used to re-request them from the user.
     */
    missingCapabilitiesComponent: ComponentType<{
        onRetry: DispatchWithoutAction;
    }>;
    /**
     * Component to display while the capabilities are evaluated or requested from
     * the user.
     */
    loadingComponent: ComponentType;
}>;

/**
 * Themes with different color schemes, either `light` or `dark`.
 */
export declare type Theme = 'light' | 'dark' | string;

/**
 * Return value of the {@link useThemeSelection} hook.
 */
export declare type ThemeSelectionContextType = {
    /**
     * The current color scheme.
     */
    theme: Theme;
    /**
     * Whether the widget is displayed in a modal.
     *
     * @remarks Modals have different background colors which the theme needs to
     * take into account.
     */
    isModal: boolean;
    /**
     * Select the current color scheme.
     *
     * @param theme - The new color scheme.
     */
    setTheme: (theme: Theme) => void;
};

/**
 * Provides the current theme selection to child components.
 * Use the {@link useThemeSelection} hook to access it.
 * @param param0 - {@link ThemeSelectionProviderProps}
 */
export declare function ThemeSelectionProvider({ children, }: ThemeSelectionProviderProps): ReactElement;

/**
 * Props for the {@link ThemeSelectionProvider} component.
 */
export declare type ThemeSelectionProviderProps = PropsWithChildren;

/**
 * Hook for accessing the current theme selection.
 * @returns The current theme selection.
 */
export declare const useThemeSelection: () => ThemeSelectionContextType;

/**
 * Hook for accessing the widget API.
 *
 * @remarks Can only be called inside a `WidgetApiProvider`
 *          (or WidgetApiMockProvider in tests).
 *
 * @returns A fully initialized widget API.
 */
export declare const useWidgetApi: () => WidgetApi;

/**
 * Provides a custom instance of the `WidgetApi` to the context.
 *
 * @remarks Should only be used in tests.
 */
export declare const WidgetApiMockProvider: Provider<WidgetApi | undefined>;

/**
 * Provides the `WidgetApi` in the React context once it's fully
 * initialized without errors.
 * Use {@link useWidgetApi} to access it.
 * @param param0 - {@link WidgetApiProviderProps}
 */
export declare function WidgetApiProvider({ children, widgetApiPromise, widgetRegistration, loadingViewComponent: LoadingViewComponent, mobileClientErrorComponent: MobileClientErrorComponent, outsideClientErrorComponent: OutsideClientErrorComponent, childErrorComponent: ChildErrorComponent, missingCapabilitiesComponent: MissingCapabilitiesComponent, missingParametersErrorComponent: MissingParametersErrorComponent, }: WidgetApiProviderProps): ReactElement;

/**
 * Props for the {@link (WidgetApiProvider:function)} component.
 */
export declare type WidgetApiProviderProps = PropsWithChildren<{
    /**
     * Configuration to set during Widget registration.
     */
    widgetRegistration?: WidgetRegistration;
    /**
     * Result from a call to `WidgetApiImpl.create`.
     */
    widgetApiPromise: Promise<WidgetApi>;
    /**
     * Component to display while the widget API communication is established or
     * while capabilities are evaluated or requested from the user.
     */
    loadingViewComponent: ComponentType;
    /**
     * Component to display if the widget is opened in an unsupported mobile
     * client.
     */
    mobileClientErrorComponent: ComponentType;
    /**
     * Component to display if the widget is opened outside a Matrix client.
     */
    outsideClientErrorComponent: ComponentType;
    /**
     * Component to display when a child component fails to render.
     */
    childErrorComponent: ComponentType<FallbackProps>;
    /**
     * Component to display if the required capabilities are missing. The
     * `onRetry` callback can be used to re-request them from the user.
     */
    missingCapabilitiesComponent: ComponentType<{
        onRetry: DispatchWithoutAction;
    }>;
    /**
     * Component to display when the widget is not properly configured in the
     * room. Takes the expected `widgetRegistration` as a parameter.
     */
    missingParametersErrorComponent: ComponentType<{
        widgetRegistration?: WidgetRegistration;
    }>;
}>;

export { }
